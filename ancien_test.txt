
let en_liste_croissante (tas: structure) : cle list =
  Array.fold_left (fun ma_string elem ->
    match elem with
    | Some x -> ma_string ^ (string_of_int (val_cle x ) ) ^ " "
    | None -> ma_string
  ) "" !(fst tas)

    
let test_structure (module Ma_structure : Data_structure) =
  
  (* test ajout itératif *)
  (* Création d'un tas *)
  let tas_ajout_iteratif : Ma_structure.structure =  Ma_structure.ajouts_iteratifs [conv 6 ; conv 5  ; conv 2 ; conv 10 ; conv 13 ; conv 7 ; conv 8 ; conv 12 ; conv 15 ; conv 14]  in

  (* Affichage du tas ajout_iteratif *)
  assert(((Ma_structure.en_liste_string tas_ajout_iteratif) = "2 6 5 10 13 7 8 12 15 14 ")) ;
  print_string "Test 1 validé.\n" ; 

  (* test suppr *)
  (* Suppression du minimum *)
  let min_supprime, _ = Ma_structure.suppr_min tas_ajout_iteratif in
  assert(min_supprime = Some(conv 2)) ;
  assert((Ma_structure.en_liste_string tas_ajout_iteratif) = "5 6 7 10 13 14 8 12 15 ")  ;

  print_string "Test 2 validé.\n" ; 
  (* test  construction *)


  (* test cons *)
  let tas_cons : Ma_structure.structure =  (Ma_structure.construction [conv 10; conv 15; conv 13 ; conv 14; conv 8 ; conv 5 ; conv 6 ; conv 7; conv 12] ) 
  in
  assert(Ma_structure.en_liste_string tas_cons = ("5 7 6 12 8 13 10 14 15 ")) ;
  print_string "Test 3 validé.\n" ; 

  (* test union *)

  let tas1 = Ma_structure.construction [conv 37;  conv 18; conv 15; conv 39; conv 11; conv 40; conv 27; conv 25; conv 9; conv 32; conv 3; conv 19; conv 23; conv 10; conv 29; conv 14; conv 26; conv 4]  in

  let tas2 = Ma_structure.construction [conv 18; conv 28; conv 35; conv 8; conv 36; conv 34; conv 16; conv 12] in

  assert((Ma_structure.en_liste_string tas1) = "3 4 10 9 11 19 15 14 37 32 18 40 23 27 29 25 26 39 ") ; 
  assert((Ma_structure.en_liste_string tas2) = "8 12 16 18 36 34 35 28 ") ; 
  let union_tas = (Ma_structure.union tas1 tas2) in
  assert(Ma_structure.en_liste_string  union_tas = "3 4 10 8 11 19 15 14 9 12 18 34 23 27 29 25 26 39 37 32 16 18 36 40 35 28 ") ;
  print_string "Test 4 validé.\n" ;; 

